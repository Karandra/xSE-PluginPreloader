<?xml version="1.0" encoding="utf-8"?>
<xSE>
	<PluginPreloader>
		<!--
			# OriginalLibrary
			If you have a mod that uses the same DLL as the preloader, you can rename the DLL from your mod and set
			its new name here. Empty by default. For example, if the preloader uses 'IpHlpAPI.dll' and your mod uses
			the same DLL, rename the DLL from your mod to something else like 'IpHlpAPI MyMod.dll' and set the option to:

			<OriginalLibrary>IpHlpAPI MyMod.dll</OriginalLibrary>
		-->
		<OriginalLibrary/>

		<!-- Load method for xSE plugins, 'ImportAddressHook' by default. Don't change unless required. -->
		<LoadMethod Name="ImportAddressHook">
			<!--
				# ImportAddressHook

				## Description:
					Sets an import table hook for the specified function inside DLL loaded by the host process.
					When the hook is called, it'll load plugins and then it'll get back to its usual operations.

					Uses Detours library by Nukem: https://github.com/Nukem9/detours

				## Remarks:
					### Fallout 4:
						LibraryName: api-ms-win-crt-runtime-l1-1-0.dll
						FunctionName: _initterm_e
							The function *must* have a signature compatible with 'void*(__cdecl*)(void*, void*)'.

					### Skyrim (Legendary Edition):
						LibraryName: kernel32.dll
						FunctionName: GetCommandLineA
							The function *must* have a signature compatible with 'void*(__stdcall*)()'.

					### Skyrim (Special and Anniversary Edition):
						LibraryName: api-ms-win-crt-runtime-l1-1-0.dll
						FunctionName: _initterm_e
							The function *must* have a signature compatible with 'void*(__cdecl*)(void*, void*)'.

				## Parameters:
					- LibraryName: The name of a DLL that contains the function to hook.
					- FunctionName: Name of the function to hook. Must be exported from a DLL pointed by the 'LibraryName' parameter.
			-->
			<ImportAddressHook>
				<LibraryName></LibraryName>
				<FunctionName></FunctionName>
			</ImportAddressHook>

			<!--
				# OnThreadAttach

				## Description:
					Same as 'OnProcessAttach' above, but loads plugins after certain number of threads have been created
					by the host process (inside 'DLL_THREAD_ATTACH' notification). This methods has all the disadvantages
					of the previous one but it can be triggered too late.

				## Remarks:
					The method mainly designed for Mod Organizer 2 (MO2) to give some time to its virtual file system to
					initialize itself, otherwise there will be no plugins to preload if they're installed as MO2 virtual
					mods.

				## Parameters:
					- ThreadNumber: Specifies a thread number which will trigger the loading. That is, when the value is '2',
					the second attached thread will trigger the loading process. Negative numbers are not allowed.
			-->
			<OnThreadAttach>
				<ThreadNumber>2</ThreadNumber>
			</OnThreadAttach>

			<!--
				# OnProcessAttach

				## Description:
					Loads plugins inside 'DLLMain' of the preloader DLL when it receives 'DLL_PROCESS_ATTACH' notification.
					In other words, right after the host process starts. Executing certain kinds of code inside 'DLLMain' is
					risky (see: https://docs.microsoft.com/ru-ru/windows/win32/dlls/dynamic-link-library-best-practices#general-best-practices)
					so this method may fail in some cases.

				## Remarks:
					The preloader calls 'DisableThreadLibraryCalls' when it's done interfacing with 'DLLMain' thread notifications.

				## Parameters:
					<None>
			-->
			<OnProcessAttach/>
		</LoadMethod>

		<!-- Initialization method for xSE plugins after they're preloaded, 'Standard' by default. Don't change unless required. -->
		<InitializationMethod Name="Standard">
			<!--
				# None

				## Description:
					No plugin initialization is done after preloading.

				## Parameters:
					<None>
			-->
			<None/>

			<!--
				# Standard

				## Description:
					The initialization method originally implemented in meh321's SKSE Plugin Preloader (https://www.nexusmods.com/skyrim/mods/75795).
					A plugin DLL can mark itself to be preloaded by packaging a text file alongside it. The text file has to be named the same way as
					the dll, but with '_preload.txt' at the end (for example 'MyMod.dll' and 'MyMod_preload.txt'). The plugin can optionally export a
					function with the name 'Initialize' and signature 'void(__cdecl*)(void)' to preform any inititalization outside of its own DLLMain,
					but it's not required.

				## Parameters:
					<None>
			-->
			<Standard/>

			<!--
				# xSE-PluginPreload

				## Description:
					The initialization method implemented in the latest xSE versions. A plugin DLL can export a function with the name '<xSE>Plugin_Preload'
					and signature 'bool(__cdecl*)(const <xSE>Interface*)'. xSE PluginPreloader is going to call this function with nullptr as its parameter
					as opponse to xSE loader calling it with an actual pointer to the structure.

					The '*_preload.txt' file is not required here as opposed to Standard method, the loader searches for '<xSE>Plugin_Preload' function export
					directly and loads the dll calling that function if it's found.

					For example, when using this method for Fallout 4 the xSE PluginPreloader is going to locate all DLL plugins containing 'F4SEPlugin_Preload'
					exported function and call that function with nullptr as its parameter for each matching DLL.

				## Parameters:
					<None>
			-->
			<xSE-PluginPreload/>
		</InitializationMethod>

		<!--
			# InstallExceptionHandler
			Usually vectored exception handler is installed right before plugins loading and removed after it's done.

			# KeepExceptionHandler
			This option allows to keep it if you need more information in case the host process crashes. 
		-->
		<InstallExceptionHandler>true</InstallExceptionHandler>
		<KeepExceptionHandler>false</KeepExceptionHandler>

		<!--
			# LoadDelay
			Sets the amount of time the preloader will pause the loading thread, in milliseconds. 0 means no delay.
			Don't change unless you need some time to attach debugger before loading starts, for example.

			# HookDelay
			HookDelay works only for 'ImportAddressHook' methods and additionally waits before hooking the required function.
		-->
		<LoadDelay>0</LoadDelay>
		<HookDelay>0</HookDelay>

		<!--
			# Processes

			This block defines a list of processes which are allowed to preload plugins. Only processes in this list
			with the attribute 'Allow' set to 'true' will be allowed to preload. Name comparison is *not* case-sensitive.
		-->
		<Processes>
			<Item Name="Fallout3.exe" Allow="false"/>
			<Item Name="FalloutNV.exe" Allow="false"/>
			<Item Name="Fallout4.exe" Allow="true"/>
			<Item Name="Fallout4VR.exe" Allow="true"/>
			<Item Name="Morrowind.exe" Allow="false"/>
			<Item Name="Oblivion.exe" Allow="false"/>
			<Item Name="TESV.exe" Allow="true"/>
			<Item Name="SkyrimSE.exe" Allow="true"/>
			<Item Name="SkyrimVR.exe" Allow="true"/>
			<Item Name="Starfield.exe" Allow="false"/>

			<Item Name="Morrowind Launcher.exe" Allow="false"/>
			<Item Name="Oblivion Launcher.exe" Allow="false"/>
			<Item Name="SkyrimLauncher.exe" Allow="false"/>
			<Item Name="SkyrimSELauncher.exe" Allow="false"/>
			<Item Name="SkyrimVRLauncher.exe" Allow="false"/>
			<Item Name="FalloutLauncher.exe" Allow="false"/>
			<Item Name="FalloutNVLauncher.exe" Allow="false"/>
			<Item Name="Fallout4Launcher.exe" Allow="false"/>
			<Item Name="Fallout4VRLauncher.exe" Allow="false"/>

			<Item Name="TESConstructionSet.exe" Allow="false"/>
			<Item Name="CreationKit.exe" Allow="false"/>
			<Item Name="ENBInjector.exe" Allow="false"/>

			<Item Name="TES Construction Set.exe" Allow="false"/>
			<Item Name="TESConstructionSet.exe" Allow="false"/>
			<Item Name="CreationKit.exe" Allow="false"/>
			<Item Name="ENBInjector.exe" Allow="false"/>

			<Item Name="OBSE_Loader.exe" Allow="false"/>
			<Item Name="SKSE_Loader.exe" Allow="false"/>
			<Item Name="SKSE64_Loader.exe" Allow="false"/>
			<Item Name="SKSEVR_Loader.exe" Allow="false"/>
			<Item Name="FOSE_Loader.exe" Allow="false"/>
			<Item Name="NVSE_Loader.exe" Allow="false"/>
			<Item Name="F4SE_Loader.exe" Allow="false"/>
			<Item Name="F4SEVR_Loader.exe" Allow="false"/>
			<Item Name="SFSE_Loader.exe" Allow="false"/>
		</Processes>
	</PluginPreloader>
</xSE>
